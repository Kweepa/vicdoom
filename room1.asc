// room script file
// use this as reference!
// http://www.classicdoom.com/doommaps.htm#d1

#define NUMVERT 140
#define NUMEDGE 200
#define NUMSEC 64
#define NUMOBJ 49
#define NUMSECRETS 8

#define EDGE_TYPE_MASK 192
#define EDGE_PROP_MASK 56
#define EDGE_TEX_MASK 7

#define EDGE_TYPE_SHIFT 6
#define EDGE_PROP_SHIFT 3

#define EDGE_TYPE_NMASK 63
#define EDGE_TEX_NMASK 248
#define EDGE_PROP_NMASK 200

#define EDGE_TYPE_NORMAL 0
#define EDGE_TYPE_DOOR 1
#define EDGE_TYPE_JAMB 2
#define EDGE_TYPE_SWITCH 3

#define NUM_JAMBS 3
#define NUM_DOORS 7
#define NUM_SWITCHES 4

struct Vertex
{
  int x, y;
};

int numV;
Vertex v[NUMVERT];

struct Edge
{
  int v1, v2;
  int tex;
};

int numE;
Edge e[NUMEDGE];

struct Sector
{
  int n;
  int e[8];
  int v[8];
  int secret;
};

int numS;
Sector s[NUMSEC];

struct Obj
{
  int x;
  int y;
  int type;
  int angle;
};

int numO;
Obj o[NUMOBJ];

int numM;

int typeSprite[17];
int wallSprite[11];

String typeNames[17];

String levelName;
int parTime = 30;

bool leftDown;
bool rightDown;

int overV = -1;
int overE = -1;
int overS = -1;
int overO = -1;
int dragFromV = -1;
int auto = false;

// one indexed (1 = e1m1, 2 = e1m2 etc)
int level = 4;

function Load()
{
  String name = String.Format("e1m%d.lev", level);
  if (File.Exists(name))
  {
    File *f = File.Open(name, eFileRead);
    if (f != null)
    {
      numV = f.ReadInt();
      numE = f.ReadInt();
      numS = f.ReadInt();
      numO = f.ReadInt();
      numM = 0;
      int i = 0;
      while (i < numV)
      {
        v[i].x = f.ReadInt();
        v[i].y = f.ReadInt();
//        v[i].x -= 20;
//        v[i].y += 20;
        i++;
      }
      i = 0;
      while (i < numE)
      {
        e[i].v1 = f.ReadInt();
        e[i].v2 = f.ReadInt();
        int t = f.ReadInt();
        int tex = t & EDGE_TEX_MASK;
        int type = (t & EDGE_TYPE_MASK) >> EDGE_TYPE_SHIFT;
        int prop = (t & EDGE_PROP_MASK) >> EDGE_PROP_SHIFT;
        if ((type == EDGE_TYPE_DOOR && prop > NUM_DOORS)
          || (type == EDGE_TYPE_JAMB && prop > NUM_JAMBS)
          || (type == EDGE_TYPE_SWITCH && prop > NUM_SWITCHES))
        {
          prop = 0;
          type = 0;
        }
        t = (type << EDGE_TYPE_SHIFT) | (prop << EDGE_PROP_SHIFT) | tex;
        e[i].tex = t;
        i++;
      }
      i = 0;
      while (i < numS)
      {
        s[i].n = f.ReadInt();
        int j = 0;
        while (j < s[i].n)
        {
          s[i].v[j] = f.ReadInt();
          s[i].e[j] = f.ReadInt();
          j++;
        }
        s[i].secret = f.ReadInt();
        i++;
      }
      i = 0;
      while (i < numO)
      {
        o[i].x = f.ReadInt();
        o[i].y = f.ReadInt();
//        o[i].x -= 20;
//        o[i].y += 20;
        o[i].type = f.ReadInt();
        o[i].angle = f.ReadInt();
        if (o[i].type < 5) numM++;
        i++;
      }
      levelName = f.ReadStringBack();
      parTime = f.ReadInt();
      f.Close();
    }
  }
  else
  {
    Display("Creating new...");
    numV = 0;
    numE = 0;
    numS = 0;
    numO = 0;
    numM = 0;
    levelName = "";
    parTime = 30;
  }
  LevelName.Text = levelName;
  ParTime.Text = String.Format("%d", parTime);
}

function Save()
{
  String name = String.Format("e1m%d.lev", level);
  File *f = File.Open(name, eFileWrite);
  if (f != null)
  {
    f.WriteInt(numV);
    f.WriteInt(numE);
    f.WriteInt(numS);
    f.WriteInt(numO);
    int i = 0;
    while (i < numV)
    {
      f.WriteInt(v[i].x);
      f.WriteInt(v[i].y);
      i++;
    }
    i = 0;
    while (i < numE)
    {
      f.WriteInt(e[i].v1);
      f.WriteInt(e[i].v2);
      f.WriteInt(e[i].tex);
      i++;
    }
    i = 0;
    while (i < numS)
    {
      f.WriteInt(s[i].n);
      int j = 0;
      while (j < s[i].n)
      {
        f.WriteInt(s[i].v[j]);
        f.WriteInt(s[i].e[j]);
        j++;
      }
      f.WriteInt(s[i].secret);
      i++;
    }
    i = 0;
    while (i < numO)
    {
      f.WriteInt(o[i].x);
      f.WriteInt(o[i].y);
      f.WriteInt(o[i].type);
      f.WriteInt(o[i].angle);
      i++;
    }
    f.WriteString(levelName);
    f.WriteInt(parTime);
    f.Close();
  }
}

File *byteStreamF;
String byteStream;
int byteStreamSize;

// byte stream start
function bss(File *f, String secName)
{
  byteStreamF = f;
  byteStream = "";
  byteStreamSize = 0;
  f.WriteRawLine(String.Format("%s:", secName));
}

// byte stream add
function bsa(int byte)
{
  if ((byteStreamSize % 16) == 0)
  {
    if (byteStream.Length > 0)
    {
      byteStreamF.WriteRawLine(byteStream);
    }
    byteStream = String.Format(".byte %d", byte);
  }
  else
  {
    byteStream = byteStream.Append(String.Format(", %d", byte));
  }
  byteStreamSize++;
}

// byte stream end
function bse(int capacity)
{
  if (byteStream.Length > 0)
  {
    byteStreamF.WriteRawLine(byteStream);
  }
  if (capacity > byteStreamSize)
  {
    byteStreamF.WriteRawLine(String.Format(".res %d, 0", capacity - byteStreamSize));
  }
  byteStreamF.WriteRawLine("");
}

bool over_edge(int x1, int y1, int x2, int y2, int mx, int my)
{
  if ((x1-mx)*(x2-mx) <= 0 && (y1-my)*(y2-my) <= 0)
  {
    int dx = x2 - x1;
    int dy = y2 - y1;
    int q;
    if (dy*dy > dx*dx)
    {
      int bx = x1 + (my - y1)*dx/dy;
      q = bx - mx;
    }
    else
    {
      int by = y1 + (mx - x1)*dy/dx;
      q = by - my;
    }
    if (q*q <= 2) return true;
  }
  return false;
}

function delete_object(int d)
{
  int i = d;
  while (i < numO - 1)
  {
    o[i].x = o[i+1].x;
    o[i].y = o[i+1].y;
    o[i].type = o[i+1].type;
    o[i].angle = o[i+1].angle;
    i++;
  }
  numO--;
}

function delete_sector(int d)
{
  int i = d;
  while (i < numS - 1)
  {
    s[i].n = s[i+1].n;
    int j = 0;
    while (j < s[i].n)
    {
      s[i].v[j] = s[i+1].v[j];
      s[i].e[j] = s[i+1].e[j];
      j++;
    }
    s[i].secret = s[i+1].secret;
    i++;
  }
  numS--;
}

function delete_edge(int d)
{
  int i = 0;
  while (i < numS)
  {
    int j = 0;
    bool deleteSector = false;
    while (j < s[i].n && !deleteSector)
    {
      if (s[i].e[j] == d)
      {
        deleteSector = true;
      }
      else if (s[i].e[j] > d)
      {
        s[i].e[j]--;
      }
      j++;
    }
    if (deleteSector)
    {
      // delete the sector
      delete_sector(i);
    }
    else
    {
      i++;
    }
  }
  i = d;
  while (i < numE - 1)
  {
    e[i].v1 = e[i+1].v1;
    e[i].v2 = e[i+1].v2;
    e[i].tex = e[i+1].tex;
    i++;
  }
  numE--;
}

function delete_vertex(int d)
{
  int i = 0;
  while (i < numS)
  {
    int j = 0;
    bool deleteSector = false;
    while (j < s[i].n && !deleteSector)
    {
      if (s[i].v[j] == d)
      {
        deleteSector = true;
      }
      else if (s[i].v[j] > d)
      {
        s[i].v[j]--;
      }
      j++;
    }
    if (deleteSector)
    {
      // delete the sector
      delete_sector(i);
    }
    else
    {
      i++;
    }
  }
  i = 0;
  while (i < numE)
  {
    if (e[i].v1 == d || e[i].v2 == d)
    {
      delete_edge(i);
    }
    else
    {
      if (e[i].v1 > d) e[i].v1--;
      if (e[i].v2 > d) e[i].v2--;
      i++;
    }
  }
  i = d;
  while (i < numV - 1)
  {
    v[i].x = v[i+1].x;
    v[i].y = v[i+1].y;
    i++;
  }
  numV--;
}

int in_sector(int x, int y)
{
  int i = 0;
  while (i < numS)
  {
    bool outside = false;
    int j = 0;
    while (j < s[i].n && !outside)
    {
      int v1 = s[i].v[j];
      int v2 = s[i].v[(j+1)%s[i].n];
      int dx1 = v[v2].x - v[v1].x;
      int dy1 = v[v2].y - v[v1].y;
      int dx2 = x - v[v1].x;
      int dy2 = y - v[v1].y;
      if (dx1*dy2 - dy1*dx2 < 0)
      {
        outside = true;
      }
      j++;
    }
    if (!outside)
    {
      return i;
    }
    i++;
  }
  return -1;
}

function create_sector(int x, int y)
{
  if (in_sector(x, y) >= 0)
  {
    return;
  }

  // find the line to the left then try going clockwise
  int i = 0;
  int maxX = 0;
  int bestE = -1;
  int bestV = -1;
  int startV = -1;
  while (i < numE)
  {
    int v1 = e[i].v1;
    int v2 = e[i].v2;
    int x1 = v[v1].x;
    int y1 = v[v1].y;
    int x2 = v[v2].x;
    int y2 = v[v2].y;
    if ((y1 - y)*(y2 - y) < 0)
    {
      int bx = x1 + ((x2 - x1)*(y - y1))/(y2 - y1);
      if (bx < x && bx > maxX)
      {
        maxX = bx;
        bestE = i;
        if (y1 < y2)
        {
          startV = v2;
          bestV = v1;
        }
        else
        {
          startV = v1;
          bestV = v2;
        }
      }
    }
    i++;
  }
  if (bestE != -1)
  {
    int secV[9];
    int secE[9];
    int numSecV = 2;
    secV[0] = startV;
    secV[1] = bestV;
    secE[0] = bestE;
    int thisV = bestV;
    int lastV = startV;

    while (numSecV < 9 && thisV != startV)
    {
      float dx1 = IntToFloat(v[thisV].x - v[lastV].x);
      float dy1 = IntToFloat(v[thisV].y - v[lastV].y);
      float len = Maths.Sqrt(dx1*dx1 + dy1*dy1);
      dx1 = dx1/len;
      dy1 = dy1/len;
      i = 0;
      float largestAngle = -20.0;
      bestE = -1;
      while (i < numE && bestV != startV)
      {
        if ((e[i].v1 == thisV && e[i].v2 != lastV)
          || (e[i].v2 == thisV && e[i].v1 != lastV))
        {
          int nextV = e[i].v2;
          if (nextV == thisV) nextV = e[i].v1;
          
          if (nextV == startV)
          {
            // we are done!
            bestV = startV;
            bestE = i;
          }
          else
          {
            float dx2 = IntToFloat(v[nextV].x - v[thisV].x);
            float dy2 = IntToFloat(v[nextV].y - v[thisV].y);
            len = Maths.Sqrt(dx2*dx2 + dy2*dy2);
            if (len <= 0.0)
            {
              Display("Coincident verts!");
              return;
            }
            dx2 = dx2/len;
            dy2 = dy2/len;
            
            // check the point is to the right
            float dot = dx1*dx2 + dy1*dy2;
            float cross = dx1*dy2 - dy1*dx2;
            if (cross >= -0.001)
            {
              float angle = Maths.RadiansToDegrees(Maths.ArcSin(cross));
              if (dot < 0.0)
              {
                angle = 180.0 - angle;
              }
              if (angle > largestAngle)
              {
                largestAngle = angle;
                bestE = i;
                bestV = nextV;
              }
            }
          }
        }
        i++;
      }
      if (bestV == startV)
      {
        // finish the sector
        secE[numSecV - 1] = bestE;
        // copy it out
        s[numS].n = numSecV;
        int q = 0;
        while (q < numSecV)
        {
          s[numS].v[q] = secV[q];
          s[numS].e[q] = secE[q];
          q++;
        }
        s[numS].secret = 0;
        numS++;
        return;
      }
      else if (bestE != -1)
      {
        // add to the temp sector
        secV[numSecV] = bestV;
        secE[numSecV - 1] = bestE;
        numSecV++;
        lastV = thisV;
        thisV = bestV;
      }
      else
      {
        // failed
        return;
      }
    }
  }
}

bool try_create_edge(int v1, int v2)
{
  if (numE == NUMEDGE) return false;
  if (v1 == v2) return false;

  int k = 0;
  while (k < numE)
  {
    if ((e[k].v1 == v1 && e[k].v2 == v2)
      || (e[k].v2 == v1 && e[k].v1 == v2))
    {
      return false;
    }
    k++;
  }
  e[numE].v1 = v1;
  e[numE].v2 = v2;
  e[numE].tex = 0;
  numE++;
}

int sector_one(int edgeIndex)
{
  int i = 0;
  int s1 = -1;
  while (i < numS)
  {
    int j = 0;
    while (j < s[i].n)
    {
      if (s[i].e[j] == edgeIndex)
      {
        if (s1 == -1)
        {
          s1 = i;
        }
        else
        {
          return s1;
        }
      }
      j++;
    }
    i++;
  }
  return -1;
}

int sector_two(int edgeIndex)
{
  int i = 0;
  int s1 = -1;
  while (i < numS)
  {
    int j = 0;
    while (j < s[i].n)
    {
      if (s[i].e[j] == edgeIndex)
      {
        if (s1 == -1)
        {
          s1 = i;
        }
        else
        {
          return i;
        }
      }
      j++;
    }
    i++;
  }
  return -1;
}

int edge_len(int i)
{
  int dx = v[e[i].v1].x/2 - v[e[i].v2].x/2;
  int dy = v[e[i].v1].y/2 - v[e[i].v2].y/2;
  return FloatToInt(Maths.Sqrt(IntToFloat(dx*dx + dy*dy)), eRoundUp);
}

int countSecrets()
{
  int i = 0;
  int numSecrets = 0;
  while (i < numS)
  {
    if (s[i].secret) numSecrets++;
    i++;
  }
  return numSecrets;
}

#define IFNP if (o[i].type != 16)

function Export()
{
  String name = String.Format("e1m%d.s", level);
  File *f = File.Open(name, eFileWrite);
  if (f != null)
  {
    f.WriteRawLine(".segment \"MAPDATA\"");

    int i;

    // 16*NUMSEC = 1K
    f.WriteRawLine("; sector data");
    bss(f, "secVerts");
    i = 0;
    while (i < numS)
    {
      int j = 0;
      while (j < 8)
      {
        bsa(s[i].v[j]);
        j++;
      }
      i++;
    }
    bse(8*NUMSEC);

    bss(f, "secEdges");
    i = 0;
    while (i < numS)
    {
      int j = 0;
      while (j < 8)
      {
        bsa(s[i].e[j]);
        j++;
      }
      i++;
    }
    bse(8*NUMSEC);
    
    f.WriteRawLine("; summary data (8 bytes)");
    f.WriteRawLine("numVerts:");
    f.WriteRawLine(String.Format(".byte %d", numV));
    f.WriteRawLine("numEdges:");
    f.WriteRawLine(String.Format(".byte %d", numE));
    f.WriteRawLine("numSectors:");
    f.WriteRawLine(String.Format(".byte %d", numS));
    f.WriteRawLine("numObj:");
    f.WriteRawLine(String.Format(".byte %d", numO-1));
    int playerSpawnX, playerSpawnY, playerSpawnAngle, playerSpawnSector;
    int numEnemies = 0, numItems = 0;
    i = 0;
    while (i < numO)
    {
      if (o[i].type == 16)
      {
        playerSpawnX = (o[i].x-160)/2;
        playerSpawnY = (120-o[i].y)/2;
        playerSpawnAngle = o[i].angle;
        playerSpawnSector = in_sector(o[i].x, o[i].y);
      }
      if (o[i].type < 5) numEnemies++;
      else if (o[i].type < 12) numItems++;
      i++;
    }
    int numSecrets = countSecrets();
    f.WriteRawLine("playerSpawnX:");
    f.WriteRawLine(String.Format(".byte %d", playerSpawnX));
    f.WriteRawLine("playerSpawnY:");
    f.WriteRawLine(String.Format(".byte %d", playerSpawnY));
    f.WriteRawLine("playerSpawnAngle:");
    f.WriteRawLine(String.Format(".byte %d", playerSpawnAngle));
    f.WriteRawLine("playerSpawnSector:");
    f.WriteRawLine(String.Format(".byte %d", playerSpawnSector));
    f.WriteRawLine("mapName:");
    f.WriteRawLine(String.Format(".byte \"%s\"", levelName));
    f.WriteRawLine(String.Format(".res %d, 0", 22 - levelName.Length));
    f.WriteRawLine("numEnemies:");
    f.WriteRawLine(String.Format(".byte %d", numEnemies));
    f.WriteRawLine("numItems:");
    f.WriteRawLine(String.Format(".byte %d", numItems));
    f.WriteRawLine("numSecrets:");
    f.WriteRawLine(String.Format(".byte %d", numSecrets));
    f.WriteRawLine("parTime:");
    f.WriteRawLine(String.Format(".byte %d", parTime));
    bss(f, "secretSectors"); i = 0; while (i < numS) { if (s[i].secret) bsa(i); i++; } bse(NUMSECRETS);
    
    // NUMSEC = 64
    f.WriteRawLine("; sector info");
    bss(f, "secNumVerts"); i = 0; while (i < numS) { bsa(s[i].n); i++; } bse(NUMSEC);

    // 4*NUMOBJ = 192
    f.WriteRawLine("; object data");
    bss(f, "objXhi"); i = 0; while (i < numO) { IFNP bsa((o[i].x-160)/2); i++; } bse(NUMOBJ-1);
    bss(f, "objYhi"); i = 0; while (i < numO) { IFNP bsa((120-o[i].y)/2); i++; } bse(NUMOBJ-1);
    bss(f, "objType"); i = 0; while (i < numO) { IFNP bsa(o[i].type); i++; } bse(NUMOBJ-1);
    bss(f, "objSec"); i = 0; while (i < numO) { IFNP bsa(in_sector(o[i].x, o[i].y)); i++; } bse(NUMOBJ-1);
    
    // 2*NUMVERT = 280
    f.WriteRawLine("; vertex data");
    bss(f, "vertX"); i = 0; while (i < numV) { bsa((v[i].x-160)/2); i++; } bse(NUMVERT);
    bss(f, "vertY"); i = 0; while (i < numV) { bsa((120-v[i].y)/2); i++; } bse(NUMVERT);
    
    // 4*NUMEDGE = 800
    f.WriteRawLine("; edge data");
    bss(f, "edgeTex"); i = 0; while (i < numE) { bsa(e[i].tex); i++; } bse(NUMEDGE);
    bss(f, "edgeSec1"); i = 0; while (i < numE) { bsa(sector_one(i)); i++; } bse(NUMEDGE);
    bss(f, "edgeSec2"); i = 0; while (i < numE) { bsa(sector_two(i)); i++; } bse(NUMEDGE);
    bss(f, "edgeLen"); i = 0; while (i < numE) { bsa(edge_len(i)); i++; } bse(NUMEDGE);
    
    f.Close();
  }
}

function on_key_press(int key)
{
  if (gLevelName.Visible || gParTime.Visible) return;
  
  if (key == eKeyN)
  {
    gLevelName.Visible = true;
    return;
  }
  
  if (key == eKeyP)
  {
    gParTime.Visible = true;
    return;
  }
    
  if (key == eKeyF1)
  {
    Display("Help:[V or Ctrl-LMB to create vertex.[Right drag between verts to make an edge.[F to add (fill) a sector.[A for auto mode (creates edges and sectors automatically).[O to place an object.[Up and down to change object type or wall texture.[N to name level.[P to set par time.");
  }
  if (key == eKeyDelete)
  {
    if (overO != -1)
    {
      if (o[overO].type < 5) numM--;
      delete_object(overO);
      overO = -1;
    }
    else if (overV != -1)
    {
      delete_vertex(overV);
      dragFromV = -1;
      overV = -1;
    }
    else if (overE != -1)
    {
      delete_edge(overE);
      dragFromV = -1;
      overE = -1;
    }
    else if (overS != -1)
    {
      delete_sector(overS);
      dragFromV = -1;
      overS = -1;
    }
  }
  if (key == eKeyF && numS < NUMSEC)
  {
    create_sector(mouse.x, mouse.y);
  }
  if (key == eKeyS)
  {
    Display("Saving...");
    Save();
  }
  if (key == eKeyE)
  {
    Display("Exporting...");
    Export();
  }
  if (key == eKeyO && numO < NUMOBJ)
  {
    o[numO].x = mouse.x;
    o[numO].y = mouse.y;
    o[numO].type = 0;
    numO++;
    numM++;
  }
  if (overO != -1)
  {
    if (key == eKeyUpArrow)
    {
      o[overO].type++;
      if (o[overO].type == 5) numM--;
      if (o[overO].type > 16) o[overO].type = 16;
    }
    if (key == eKeyDownArrow)
    {
      o[overO].type--;
      if (o[overO].type == 4) numM++;
      if (o[overO].type < 0) o[overO].type = 0;
    }
    if (key == eKeyLeftArrow)
    {
      o[overO].angle--;
      if (o[overO].angle < 0) o[overO].angle = 7;
    }
    if (key == eKeyRightArrow)
    {
      o[overO].angle++;
      if (o[overO].angle > 7) o[overO].angle = 0;
    }
  }
  if (overE != -1)
  {
    if (key == eKeyUpArrow)
    {
      int bits = e[overE].tex & 248;
      e[overE].tex = e[overE].tex & 7;
      e[overE].tex++;
      if (e[overE].tex > 6) e[overE].tex = 6;
      e[overE].tex = bits | e[overE].tex;
    }
    if (key == eKeyDownArrow)
    {
      int bits = e[overE].tex & 248;
      e[overE].tex = e[overE].tex & 7;
      e[overE].tex--;
      if (e[overE].tex < 0) e[overE].tex = 0;
      e[overE].tex = bits | e[overE].tex;
    }
    if (key == eKeyJ)
    {
      int b = e[overE].tex;
      int tex = b & EDGE_TEX_MASK;
      int type = (b & EDGE_TYPE_MASK) >> EDGE_TYPE_SHIFT;
      int prop = (b & EDGE_PROP_MASK) >> EDGE_PROP_SHIFT;
      if (type == EDGE_TYPE_JAMB)
      {
        prop++;
        if (prop == NUM_JAMBS)
        {
          prop = 0;
          type = 0;
        }
      }
      else
      {
        prop = 0;
        type = EDGE_TYPE_JAMB;
      }
      e[overE].tex = (type << EDGE_TYPE_SHIFT) | (prop << EDGE_PROP_SHIFT) | tex;
    }
    if (key == eKeyL)
    {
      int b = e[overE].tex;
      int tex = b & EDGE_TEX_MASK;
      int type = (b & EDGE_TYPE_MASK) >> EDGE_TYPE_SHIFT;
      int prop = (b & EDGE_PROP_MASK) >> EDGE_PROP_SHIFT;
      if (type == EDGE_TYPE_DOOR)
      {
        prop++;
        if (prop == NUM_DOORS)
        {
          prop = 0;
          type = 0;
        }
      }
      else
      {
        prop = 0;
        type = EDGE_TYPE_DOOR;
      }
      e[overE].tex = (type << EDGE_TYPE_SHIFT) | (prop << EDGE_PROP_SHIFT) | tex;
    }
    if (key == eKeyK)
    {
      int b = e[overE].tex;
      int tex = b & EDGE_TEX_MASK;
      int type = (b & EDGE_TYPE_MASK) >> EDGE_TYPE_SHIFT;
      int prop = (b & EDGE_PROP_MASK) >> EDGE_PROP_SHIFT;
      if (type == EDGE_TYPE_SWITCH)
      {
        prop++;
        if (prop == NUM_SWITCHES)
        {
          prop = 0;
          type = 0;
        }
      }
      else
      {
        prop = 0;
        type = EDGE_TYPE_SWITCH;
      }
      e[overE].tex = (type << EDGE_TYPE_SHIFT) | (prop << EDGE_PROP_SHIFT) | tex;
    }
    if (key == eKeyI)
    {
      e[overE].tex = e[overE].tex & EDGE_TEX_MASK;
    }
  }
  if (overV == -1 && key == eKeyV && numV < NUMVERT)
  {
    v[numV].x = 2*(mouse.x/2);
    v[numV].y = 2*(mouse.y/2);
    
    if (dragFromV != -1)
    {
      // create an edge
      try_create_edge(dragFromV, numV);
      if (auto)
      {
        dragFromV = numV;
      }
    }
    numV++;
  }
  if (overS != -1 && key == eKeyH)
  {
    if (countSecrets() < NUMSECRETS)
    {
      s[overS].secret = 1 - s[overS].secret;
    }
  }
  if (key == eKeyA)
  {
    auto = !auto;
    if (!auto)
    {
      dragFromV = -1;
    }
    else if (overV != -1)
    {
      dragFromV = overV;
    }
  }
  if (key >= eKey1 && key <= eKey9)
  {
    level = key - eKey0;
    Load();
  }
}

function repeatedly_execute_always()
{
  if (gLevelName.Visible || gParTime.Visible) return;
  
  levelName = LevelName.Text;
  parTime = ParTime.Text.AsInt;

  int mx = mouse.x;
  int my = mouse.y;
  
  Mouse.UseModeGraphic(eModePointer);
  
  if (Mouse.IsButtonDown(eMouseLeft))
  {
    int smx = 2*(mx/2);
    int smy = 2*(my/2);
  
    if (overV != -1)
    {
      v[overV].x = smx;
      v[overV].y = smy;
    }
    else if (overO != -1)
    {
      o[overO].x = smx;
      o[overO].y = smy;
    }
    if (!leftDown)
    {
      if (auto)
      {
        if (overV != -1)
        {
          if (dragFromV != -1)
          {
            try_create_edge(dragFromV, overV);
          }
          if (auto) // could be turned off by creating sector
          {
            dragFromV = overV;
          }
        }
        else if (numV < NUMVERT)
        {
          v[numV].x = smx;
          v[numV].y = smy;
          
          if (dragFromV != -1)
          {
            try_create_edge(dragFromV, numV);
          }
          dragFromV = numV;
          numV++;
        }
      }
    }
    leftDown = true;
  }
  else
  {
    leftDown = false;
  }
  if (Mouse.IsButtonDown(eMouseRight))
  {
    if (!rightDown && numE < NUMEDGE)
    {
      dragFromV = overV;
    }
    rightDown = true;
  }
  else
  {
    if (rightDown && dragFromV != -1 && overV != -1 && dragFromV != overV)
    {
      try_create_edge(dragFromV, overV);
      if (auto)
      {
        dragFromV = overV;
      }
      else
      {
        dragFromV = -1;
      }
    }
    rightDown = false;
  }

  DrawingSurface *ds = Room.GetDrawingSurfaceForBackground();
  ds.Clear(0);

  overS = -1;
  if (overV == -1 && overE == -1)
  {
    overS = in_sector(mx, my);
  }
  int i = 0;
  while (i < numS)
  {
    if (s[i].secret)
    {
      if (overS == i)
      {
        ds.DrawingColor = Game.GetColorFromRGB(64, 96, 64);
      }
      else
      {
        ds.DrawingColor = Game.GetColorFromRGB(0, 64, 64);
      }
    }
    else
    {
      if (overS == i)
      {
        ds.DrawingColor = Game.GetColorFromRGB(64, 64, 0);
      }
      else
      {
        ds.DrawingColor = Game.GetColorFromRGB(0, 64, 0);
      }
    }
    int j = 1;
    while (j < s[i].n - 1)
    {
      ds.DrawTriangle(v[s[i].v[0]].x, v[s[i].v[0]].y, v[s[i].v[j]].x, v[s[i].v[j]].y, v[s[i].v[j+1]].x, v[s[i].v[j+1]].y);
      j++;
    }
    i++;
  }
      
  // draw grid
  int darkLines = Game.GetColorFromRGB(5, 5, 40);
  int lightLines = Game.GetColorFromRGB(5, 5, 80);
  int x = 0;
  while (x < 320)
  {
    if ((x % 5) == 0)
    {
      ds.DrawingColor = lightLines;
    }
    else
    {
      ds.DrawingColor = darkLines;
    }
    ds.DrawLine(x, 0, x, 240);
    ds.DrawLine(0, x, 320, x);
    x += 4;
  }
  ds.DrawingColor = Game.GetColorFromRGB(5, 5, 160);
  ds.DrawLine(160, 120-5, 160, 120+5);
  ds.DrawLine(160-5, 120, 160+5, 120);
  ds.DrawLine(160-128, 0, 160-128, 240);
  ds.DrawLine(160+127, 0, 160+127, 240);

  ds.DrawingColor = Game.GetColorFromRGB(99, 99, 99);
  String stat = String.Format("e1m%d v=%d e=%d s=%d o=%d m=%d", level, numV, numE, numS, numO, numM);
  ds.DrawString(0, 0, eFontSpeech, stat);
  if (overO != -1)
  {
    ds.DrawString(260, 0, eFontSpeech, typeNames[o[overO].type]);
  }
  else if (overE != -1)
  {
    stat = String.Format("tex=%d", e[overE].tex & EDGE_TEX_MASK);
    ds.DrawString(280, 10, eFontSpeech, stat);
    int type = (e[overE].tex & EDGE_TYPE_MASK) >> EDGE_TYPE_SHIFT;
    int prop = (e[overE].tex & EDGE_PROP_MASK) >> EDGE_PROP_SHIFT;
    if (type == EDGE_TYPE_DOOR)
    {
      if (prop == 0) ds.DrawString(240, 54, eFontSpeech, "UNLOCKED DOOR");
      if (prop == 1) ds.DrawString(271, 54, eFontSpeech, "RED DOOR");
      if (prop == 2) ds.DrawString(257, 54, eFontSpeech, "GREEN DOOR");
      if (prop == 3) ds.DrawString(265, 54, eFontSpeech, "BLUE DOOR");
      if (prop == 4) ds.DrawString(265, 54, eFontSpeech, "SHOT DOOR");
      if (prop == 5) ds.DrawString(251, 54, eFontSpeech, "REMOTE DOOR");
      if (prop == 6) ds.DrawString(246, 54, eFontSpeech, "ONE WAY DOOR");
    }
    if (type == EDGE_TYPE_JAMB)
    {
      if (prop == 0) ds.DrawString(270, 54, eFontSpeech, "RED JAMB");
      if (prop == 1) ds.DrawString(256, 54, eFontSpeech, "GREEN JAMB");
      if (prop == 2) ds.DrawString(264, 54, eFontSpeech, "BLUE JAMB");
    }
    if (type == EDGE_TYPE_SWITCH)
    {
      if (prop == 0) ds.DrawString(264, 54, eFontSpeech, "END LEVEL");
      if (prop == 1) ds.DrawString(251, 54, eFontSpeech, "OPEN DOOR +");
      if (prop == 2) ds.DrawString(251, 54, eFontSpeech, "REMOVE DOOR");
      if (prop == 3) ds.DrawString(251, 54, eFontSpeech, "OPEN DOOR -");
    }
    ds.DrawImage(300, 20, wallSprite[e[overE].tex & EDGE_TEX_MASK]);
    stat = String.Format("edge %d", overE);
    ds.DrawString(272, 0, eFontSpeech, stat);
  }
  else if (overV != -1)
  {
    stat = String.Format("vert %d", overV);
    ds.DrawString(272, 0, eFontSpeech, stat);
  }
  else if (overS != -1)
  {
    stat = String.Format("sect %d", overS);
    ds.DrawString(280, 0, eFontSpeech, stat);
    stat = String.Format("e %d %d %d %d %d %d %d %d", s[overS].e[0], s[overS].e[1], s[overS].e[2], s[overS].e[3], s[overS].e[4], s[overS].e[5], s[overS].e[6], s[overS].e[7]);
    ds.DrawString(200, 230, eFontSpeech, stat);
  }
  stat = String.Format("x=%d y=%d", mx-160, 120-my);
  ds.DrawString(0, 230, eFontSpeech, stat);
  if (auto)
  {
    ds.DrawString(290, 230, eFontSpeech, "auto");
  }
  
  overE = -1;
  i = 0;
  while (i < numE)
  {
    int x1 = v[e[i].v1].x;
    int y1 = v[e[i].v1].y;
    int x2 = v[e[i].v2].x;
    int y2 = v[e[i].v2].y;
    if (overV == -1 && overE == -1 && over_edge(x1, y1, x2, y2, mx, my))
    {
      overE = i;
      ds.DrawingColor = Game.GetColorFromRGB(255, 255, 0);
    }
    else
    {
      ds.DrawingColor = Game.GetColorFromRGB(0, 255, 0);
    }
    ds.DrawLine(x1, y1, x2, y2);
    i++;
  }
  if (dragFromV != -1)
  {
    ds.DrawingColor = Game.GetColorFromRGB(255, 255, 255);
    ds.DrawLine(v[dragFromV].x, v[dragFromV].y, mx, my);
  }
  overV = -1;
  i = 0;
  while (i < numV)
  {
    int x1 = v[i].x;
    int y1 = v[i].y;
    int dx = x1 - mx;
    int dy = y1 - my;
    if (dx*dx < 2 && dy*dy < 2)
    {
      overV = i;
      ds.DrawingColor = Game.GetColorFromRGB(255, 255, 0);
      ds.DrawRectangle(x1-1, y1-1, x1+1, y1+1);
    }
    else
    {
      ds.DrawingColor = Game.GetColorFromRGB(0, 255, 0);
      ds.DrawRectangle(x1-1, y1-1, x1+1, y1+1);
    }
    i++;
  }
  overO = -1;
  i = 0;
  while (i < numO)
  {
    int x1 = o[i].x;
    int y1 = o[i].y;
    if (overO == -1)
    {
      int dx = x1 - mx;
      int dy = y1 - my;
      if (dx*dx < 16 && dy*dy < 16)
      {
        ds.DrawingColor = Game.GetColorFromRGB(255, 255, 0);
        ds.DrawRectangle(x1-5, y1-5, x1+4, y1+4);
        float ang = 0.786*IntToFloat(o[i].angle);
        ds.DrawLine(x1, y1, x1+FloatToInt(8.0*Maths.Sin(ang)), y1+FloatToInt(8.0*Maths.Cos(ang)));
        overO = i;
      }
    }
    ds.DrawImage(x1-4, y1-4, typeSprite[o[i].type]);
    i++;
  }
  
  ds.Release();
}

function room_AfterFadeIn()
{
  Load();
  typeSprite[0] = 16;
  typeSprite[1] = 12;
  typeSprite[2] = 13;
  typeSprite[3] = 10;
  typeSprite[4] = 27;
  typeSprite[5] = 6;
  typeSprite[6] = 28;
  typeSprite[7] = 15;
  typeSprite[8] = 11;
  typeSprite[9] = 14;
  typeSprite[10] = 19;
  typeSprite[11] = 9;
  typeSprite[12] = 8;
  typeSprite[13] = 18;
  typeSprite[14] = 29;
  typeSprite[15] = 26;
  typeSprite[16] = 17;

  typeNames[0] = "POSSESSED";
  typeNames[1] = "IMP";
  typeNames[2] = "DEMON";
  typeNames[3] = "CACODEMON";
  typeNames[4] = "BARON";
  typeNames[5] = "GREEN ARMOR";
  typeNames[6] = "BLUE ARMOR";
  typeNames[7] = "AMMO";
  typeNames[8] = "MEDKIT";
  typeNames[9] = "RED KEYCARD";
  typeNames[10] = "GREEN KEYCARD";
  typeNames[11] = "BLUE KEYCARD";
  typeNames[12] = "BARREL";
  typeNames[13] = "PILLAR";
  typeNames[14] = "SKULLPILE";
  typeNames[15] = "ACID";
  typeNames[16] = "SPAWN";

  wallSprite[0] = 21;
  wallSprite[1] = 22;
  wallSprite[2] = 23;
  wallSprite[3] = 25;
  wallSprite[4] = 30;
  wallSprite[5] = 31;
  wallSprite[6] = 24;
  wallSprite[7] = 24;
  wallSprite[8] = 24;
  wallSprite[9] = 24;
}
